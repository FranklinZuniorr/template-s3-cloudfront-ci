name: Release

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      S3_BUCKET_NAME:
        required: true
      CLOUDFRONT_DISTRIBUTION_ID:
        required: true
      WF_GITHUB_TOKEN:
        required: true
      GH_LINK_PROJECT_ENVS:
        required: true

jobs:
  setup:
    name: preparing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'yarn'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Create .env file from GitHub API
        env:
          GH_TOKEN: ${{ secrets.WF_GITHUB_TOKEN }}
          GH_LINK_PROJECT_ENVS: ${{ secrets.GH_LINK_PROJECT_ENVS }}
        run: |
          LINK="${GH_LINK_PROJECT_ENVS}"
      
          if [ -z "$LINK" ]; then
            echo "❌ None link provided."
            exit 1
          fi
      
          echo "📥 Downloading .env from GitHub API: $LINK"
      
          CONTENT=$(curl -sSL \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3.raw" \
            "$LINK")
      
          if [ -z "$CONTENT" ]; then
            echo "❌ Failed to download content or content is empty."
            exit 1
          fi
      
          printf "%s" "$CONTENT" > .env
      
          echo "✅ File .env created:"
          cat .env      

      - name: Build project
        run: |
          export NODE_OPTIONS="--max-old-space-size=4096"
          export REACT_APP_BROWSER_ROUTER_BASENAME="/"
          yarn build

      - name: Upload to S3
        run: |
          aws s3 sync ./build s3://$S3_BUCKET_NAME --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

      - name: Get CloudFront Domain Name
        id: get_cf_domain
        run: |
          DOMAIN_NAME=$(aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID \
            --query 'Distribution.DomainName' --output text)
          
          echo "Domain name is: $DOMAIN_NAME"
          echo "domain_name=$DOMAIN_NAME" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

      - name: Preview URL summary
        if: steps.get_cf_domain.outputs.domain_name != ''
        run: |
          echo "### 🌐 Preview disponível" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 https://${{ steps.get_cf_domain.outputs.domain_name }}" >> $GITHUB_STEP_SUMMARY
        
      - name: Semantic release
        env:
          GITHUB_TOKEN: ${{ secrets.WF_GITHUB_TOKEN }}
        run: yarn release