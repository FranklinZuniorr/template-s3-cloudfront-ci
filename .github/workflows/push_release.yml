name: Release

on:
  workflow_call:
    inputs:
      has_semantic_release:
        required: false
        type: boolean
        default: true
      project_build_envs:
        required: true
        type: string
      environment_type:
        required: true
        type: string
        default: prod
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      S3_BUCKET_NAME:
        required: true
      CLOUDFRONT_DISTRIBUTION_ID:
        required: true
      WF_GITHUB_TOKEN:
        required: true

jobs:
  setup:
    name: preparing
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_type }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'yarn'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Create .env by "project_build_envs" input
        run: |
          printf "%s" "$PROJECT_ENVS" > .env
          echo "✅ File .env created from input"
        env:
          PROJECT_ENVS: ${{ inputs.project_build_envs }}

      - name: Build project
        run: |
          export NODE_OPTIONS="--max-old-space-size=4096"
          export REACT_APP_BROWSER_ROUTER_BASENAME="/"
          export NEXT_PUBLIC_BASENAME="/"
          export NG_APP_BASENAME="/"
          export VUE_APP_BASENAME="/"
          yarn build
        
      - name: Upload to S3
        run: |
          aws s3 sync ./build s3://$S3_BUCKET_NAME --delete \

          aws s3 cp ./build/ s3://$S3_BUCKET_NAME --recursive \
            --exclude "index.html" \
            --cache-control "max-age=86400, public" \
            --metadata-directive REPLACE

          aws s3 cp ./build/index.html s3://$S3_BUCKET_NAME/index.html \
            --cache-control "no-cache, no-store, must-revalidate" \
            --metadata-directive REPLACE
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

      - name: Verify if has some invalidation with "/*" path
        id: check_full_invalidation
        run: |
          DIST_ID="${CLOUDFRONT_DISTRIBUTION_ID}"
          
          echo "🔍 Searching invalidations $DIST_ID..."
          IDS=$(aws cloudfront list-invalidations \
            --distribution-id "$DIST_ID" \
            --query "InvalidationList.Items[].Id" \
            --output text)

          FOUND="no"

          for ID in $IDS; do
            MATCH=$(aws cloudfront get-invalidation \
              --distribution-id "$DIST_ID" \
              --id "$ID" \
              --query "Invalidation.InvalidationBatch.Paths.Items" \
              --output text | grep -Fx "/*" || true)

            if [[ "$MATCH" == "/*" ]]; then
              FOUND="yes"
              break
            fi
          done

          echo "✅ Invalidation founded? $FOUND"
          echo "has_full_invalidation=$FOUND" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
  
      - name: Invalidate CloudFront cache (index.html ONLY)
        if: steps.check_full_invalidation.outputs.has_full_invalidation == 'yes'
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/${PREVIEW_PREFIX}/index.html"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}  
          
      - name: Invalidate CloudFront cache (ALL)
        if: steps.check_full_invalidation.outputs.has_full_invalidation == 'no'
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/${PREVIEW_PREFIX}/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        
      - name: Get CloudFront Domain Name and Alternate Name
        id: get_cf_domain
        run: |
          DOMAIN_NAME=$(aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID \
            --query 'Distribution.DomainName' --output text)
      
          ALTERNATE_NAME=$(aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID \
            --query 'Distribution.DistributionConfig.Aliases.Items[0]' --output text)
      
          echo "Domain name is: $DOMAIN_NAME"
          echo "Alternate domain (CNAME) is: $ALTERNATE_NAME"
      
          echo "domain_name=$DOMAIN_NAME" >> "$GITHUB_OUTPUT"
          echo "alternate_name=$ALTERNATE_NAME" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

      - name: Preview URL summary
        if: ${{ steps.get_cf_domain.outputs.alternate_name != 'None' || steps.get_cf_domain.outputs.domain_name != '' }}
        run: |
          DOMAIN_NAME="${DOMAIN_NAME}"
          ALTERNATE_DOMAIN="${ALTERNATE_DOMAIN}"
      
          if [[ -n "$ALTERNATE_DOMAIN" && "$ALTERNATE_DOMAIN" != "None" ]]; then
            PREVIEW_URL="https://${ALTERNATE_DOMAIN}"
          else
            PREVIEW_URL="https://${DOMAIN_NAME}"
          fi
      
          echo "### 🌐 Preview disponível" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "🔗 $PREVIEW_URL" >> "$GITHUB_STEP_SUMMARY"
        env:
          DOMAIN_NAME: ${{ steps.get_cf_domain.outputs.domain_name }}
          ALTERNATE_DOMAIN: ${{ steps.get_cf_domain.outputs.alternate_name }}
        
      - name: Semantic release
        if: inputs.has_semantic_release == true
        env:
          GITHUB_TOKEN: ${{ secrets.WF_GITHUB_TOKEN }}
        run: yarn release