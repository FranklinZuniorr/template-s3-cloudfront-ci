name: Deploy Preview

on:
  workflow_call:
    inputs:
      run_tests:
        required: false
        type: boolean
        default: true
      run_lint:
        required: false
        type: boolean
        default: true
      run_tsc:
        required: false
        type: boolean
        default: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      S3_BUCKET_NAME:
        required: true
      CLOUDFRONT_DISTRIBUTION_ID:
        required: true
      WF_GITHUB_TOKEN:
        required: true
      AWS_SSM_PARAMETER_PATH:
        required: true

jobs:
  preview:
    runs-on: ubuntu-latest

    env:
      PREVIEW_PREFIX: preview-pr-${{ github.event.pull_request.number }}
      AWS_PR_SSM_PARAMETER: .env.stage.pr.${{ github.event.pull_request.number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'yarn'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Commit message lint
        if: inputs.run_lint == true
        uses: wagoid/commitlint-github-action@v6
        with:
          token: ${{ secrets.WF_GITHUB_TOKEN }}

      - name: Typescript check
        if: inputs.run_tsc == true
        run: yarn tsc --build

      - name: Test coverage
        if: inputs.run_tests == true
        run: yarn test:ci

      - name: Upload coverage report
        if: inputs.run_tests == true
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Comment coverage report link
        if: github.event_name == 'pull_request' && inputs.run_tests == true
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WF_GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const runId = context.runId;
            const { owner, repo } = context.repo;
            const artifactUrl = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;

            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner,
              repo,
              body: `📊 Coverage report uploaded as an artifact. [Click here to view it](${artifactUrl})\n
              ![Coverage GIF](https://i.giphy.com/XIqCQx02E1U9W.webp)`
            });

      - name: AWS SSM new parameter - Project envs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_PREVIEW_PARAM_NAME: ${{ env.AWS_PR_SSM_PARAMETER }}
          AWS_SSM_PARAMETER_PATH: ${{ secrets.AWS_SSM_PARAMETER_PATH }}
        run: |
          PARAM_PATH="${AWS_SSM_PARAMETER_PATH}"

          if [ -z "$PARAM_PATH" ]; then
            echo "❌ None parameter path provided."
            exit 1
          fi

          CONTENT=$(aws ssm get-parameter --name "$PARAM_PATH" --with-decryption --query Parameter.Value --output text)

          if [ -z "$CONTENT" ]; then
            echo "❌ Failed to download content or content is empty."
            exit 1
          fi

          if aws ssm get-parameter --name "$AWS_PREVIEW_PARAM_NAME" &> /dev/null; then
            echo "✅ Parameter $AWS_PREVIEW_PARAM_NAME already exist"
          else
            echo "Creating new parameter $AWS_PREVIEW_PARAM_NAME"
            aws ssm put-parameter \
              --name "$AWS_PREVIEW_PARAM_NAME" \
              --value "$CONTENT" \
              --type String \
              --tier Standard \
              --overwrite
          fi

      - name: Create .env file from GitHub API
        id: create_env
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_SSM_PARAMETER_PATH: ${{ secrets.AWS_SSM_PARAMETER_PATH }}
          AWS_PREVIEW_PARAM_NAME: ${{ env.AWS_PR_SSM_PARAMETER }}
        run: |
          PARAM_PATH="${AWS_PREVIEW_PARAM_NAME}"

          if [ -z "$PARAM_PATH" ]; then
            echo "❌ None parameter path provided."
            exit 1
          fi

          echo "📥 Downloading .env content from AWS SSM Parameter Store: $PARAM_PATH"

          CONTENT=$(aws ssm get-parameter --name "$PARAM_PATH" --with-decryption --query Parameter.Value --output text)

          if [ -z "$CONTENT" ]; then
            echo "❌ Failed to download content or content is empty."
            exit 1
          fi

          PARAM_PATH_STAGE_SSM_PARAMETER_PATH="${AWS_SSM_PARAMETER_PATH}"

          CONTENT_STAGE_SSM_PARAMETER_PATH=$(aws ssm get-parameter --name "$PARAM_PATH_STAGE_SSM_PARAMETER_PATH" --with-decryption --query Parameter.Value --output text)

          if [ -z "$CONTENT_STAGE_SSM_PARAMETER_PATH" ]; then
            echo "❌ Failed to download content or content is empty."
            exit 1
          fi

          if [ "$CONTENT" != "$CONTENT_STAGE_SSM_PARAMETER_PATH" ]; then
            echo "✅ Detected updtaes in $PARAM_PATH"
            echo "has_detected_atts_preview_param=UPDATE" >> $GITHUB_OUTPUT
          fi

          printf "%s" "$CONTENT" > .env

          echo "✅ File .env created from SSM Parameter Store"
          
      - name: Build project
        run: |
          export NODE_OPTIONS="--max-old-space-size=4096"
          export REACT_APP_BROWSER_ROUTER_BASENAME="/${{ env.PREVIEW_PREFIX }}"
          yarn build

      - name: Detect changed files
        id: detect_changes
        run: |
          CHANGED_FILES=$(aws s3 sync ./build s3://$S3_BUCKET_NAME --size-only --dryrun \
            | grep 'upload:' \
            | awk '{sub(/^\.\/build/, "", $3); print $3}' \
            | sed 's/^/\//' \
            | tr '\n' ' ')
      
          echo "Changed files: $CHANGED_FILES"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No files changed. Skipping invalidation."
            echo "paths=SKIP" >> $GITHUB_OUTPUT
          else
            echo "paths=$CHANGED_FILES" >> $GITHUB_OUTPUT
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          
      - name: Upload to S3
        run: |
          aws s3 sync ./build "s3://${S3_BUCKET_NAME}/${PREVIEW_PREFIX}" --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        
      - name: Invalidate CloudFront cache (only changed files)
        if: steps.detect_changes.outputs.paths != 'SKIP' && steps.create_env.outputs.has_detected_atts_preview_param != 'UPDATE'
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths ${{ steps.detect_changes.outputs.paths }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

      - name: Invalidate CloudFront cache (all)
        if: steps.create_env.outputs.has_detected_atts_preview_param == 'UPDATE'
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

      - name: Get CloudFront Domain Name and Alternate Name
        id: get_cf_domain
        run: |
          DOMAIN_NAME=$(aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID \
            --query 'Distribution.DomainName' --output text)
      
          ALTERNATE_NAME=$(aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID \
            --query 'Distribution.DistributionConfig.Aliases.Items[0]' --output text)
      
          echo "Domain name is: $DOMAIN_NAME"
          echo "Alternate domain (CNAME) is: $ALTERNATE_NAME"
      
          echo "domain_name=$DOMAIN_NAME" >> "$GITHUB_OUTPUT"
          echo "alternate_name=$ALTERNATE_NAME" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

      - name: Output Preview URL
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.WF_GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const prefix = `preview-pr-${prNumber}`;

            const domain_name = process.env.DOMAIN_NAME;
            const alternate_domain = process.env.ALTERNATE_DOMAIN;

            const previewDomainNameUrl = `https://${domain_name}/${prefix}`;
            const previewAlternateDomain = `https://${alternate_domain}/${prefix}`;

            const isValidAlternate = alternate_domain && alternate_domain !== 'None';

            const previewUrl = isValidAlternate ? previewAlternateDomain : previewDomainNameUrl;

            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Preview disponível: [${previewUrl}](${previewUrl})\n
            ![Coverage GIF](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExZThtYmVtZThra2loajhjbmIzM2ZnNHAxZHQ4aHowcHkzZnV2Nzl5OCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/ukZvSoWXXb3YKNHIsw/giphy.gif)`
            });
        env:
          DOMAIN_NAME: ${{ steps.get_cf_domain.outputs.domain_name }}
          ALTERNATE_DOMAIN: ${{ steps.get_cf_domain.outputs.alternate_name }}
